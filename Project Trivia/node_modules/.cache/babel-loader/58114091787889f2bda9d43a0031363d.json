{"ast":null,"code":"import { fetchAPITrivia, fetchAPIQuestions } from '../services';\nexport const LOGIN = 'LOGIN';\nexport const login = userData => ({\n  type: LOGIN,\n  userData\n});\nexport const TOKEN = 'TOKEN';\nexport const sendToken = token => ({\n  type: TOKEN,\n  token\n});\nexport const QUESTIONS = 'QUESTIONS';\nexport const sendQuestions = questions => ({\n  type: QUESTIONS,\n  questions\n});\nexport const SCORE = 'SCORE';\nexport const sendScore = score => ({\n  type: SCORE,\n  score\n});\nexport const ASSERTIONS = 'ASSERTIONS';\nexport const sendAssertions = assertions => ({\n  type: ASSERTIONS,\n  assertions\n});\nexport const ADD_RANKING = 'ADD_RANKING';\nexport const addRanking = (name, hash) => ({\n  type: ADD_RANKING,\n  name,\n  hash\n});\nexport const RESET_GAME = 'RESET_GAME';\nexport const resetGame = () => ({\n  type: RESET_GAME\n});\nexport function handleToken() {\n  return async dispatch => {\n    const tokenObjResponse = await fetchAPITrivia();\n    const tokenCode = tokenObjResponse.token;\n    dispatch(sendToken(tokenCode));\n    localStorage.setItem('token', tokenCode);\n  };\n}\nexport function getQuestions(token) {\n  return async dispatch => {\n    const questionObject = await fetchAPIQuestions(token);\n    dispatch(sendQuestions(questionObject));\n  };\n}\nexport function updateScoreAndAssertions(score, assertions) {\n  return (dispatch, setState) => {\n    const _setState$user = setState().user,\n          name = _setState$user.name,\n          email = _setState$user.email;\n    dispatch(sendAssertions(assertions));\n    dispatch(sendScore(score));\n    const playerObject = {\n      player: {\n        name,\n        gravatarEmail: email,\n        score,\n        assertions\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(playerObject));\n  };\n}","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/actions/index.js"],"names":["fetchAPITrivia","fetchAPIQuestions","LOGIN","login","userData","type","TOKEN","sendToken","token","QUESTIONS","sendQuestions","questions","SCORE","sendScore","score","ASSERTIONS","sendAssertions","assertions","ADD_RANKING","addRanking","name","hash","RESET_GAME","resetGame","handleToken","dispatch","tokenObjResponse","tokenCode","localStorage","setItem","getQuestions","questionObject","updateScoreAndAssertions","setState","user","email","playerObject","player","gravatarEmail","JSON","stringify"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAkD,aAAlD;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,KAAK,GAAIC,QAAD,KAAe;AAAEC,EAAAA,IAAI,EAAEH,KAAR;AAAeE,EAAAA;AAAf,CAAf,CAAd;AAEP,OAAO,MAAME,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,SAAS,GAAIC,KAAD,KAAY;AAAEH,EAAAA,IAAI,EAAEC,KAAR;AAAeE,EAAAA;AAAf,CAAZ,CAAlB;AAEP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,aAAa,GAAIC,SAAD,KAAgB;AAAEN,EAAAA,IAAI,EAAEI,SAAR;AAAmBE,EAAAA;AAAnB,CAAhB,CAAtB;AAEP,OAAO,MAAMC,KAAK,GAAG,OAAd;AACP,OAAO,MAAMC,SAAS,GAAIC,KAAD,KAAY;AAAET,EAAAA,IAAI,EAAEO,KAAR;AAAeE,EAAAA;AAAf,CAAZ,CAAlB;AAEP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,cAAc,GAAIC,UAAD,KAAiB;AAAEZ,EAAAA,IAAI,EAAEU,UAAR;AAAoBE,EAAAA;AAApB,CAAjB,CAAvB;AAEP,OAAO,MAAMC,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAOC,IAAP,MAAiB;AAAEhB,EAAAA,IAAI,EAAEa,WAAR;AAAqBE,EAAAA,IAArB;AAA2BC,EAAAA;AAA3B,CAAjB,CAAnB;AAEP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,SAAS,GAAG,OAAO;AAAElB,EAAAA,IAAI,EAAEiB;AAAR,CAAP,CAAlB;AAEP,OAAO,SAASE,WAAT,GAAuB;AAC5B,SAAO,MAAOC,QAAP,IAAoB;AACzB,UAAMC,gBAAgB,GAAG,MAAM1B,cAAc,EAA7C;AACA,UAAM2B,SAAS,GAAGD,gBAAgB,CAAClB,KAAnC;AACAiB,IAAAA,QAAQ,CAAClB,SAAS,CAACoB,SAAD,CAAV,CAAR;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,SAA9B;AACD,GALD;AAMD;AAED,OAAO,SAASG,YAAT,CAAsBtB,KAAtB,EAA6B;AAClC,SAAO,MAAOiB,QAAP,IAAoB;AACzB,UAAMM,cAAc,GAAG,MAAM9B,iBAAiB,CAACO,KAAD,CAA9C;AACAiB,IAAAA,QAAQ,CAACf,aAAa,CAACqB,cAAD,CAAd,CAAR;AACD,GAHD;AAID;AAED,OAAO,SAASC,wBAAT,CAAkClB,KAAlC,EAAyCG,UAAzC,EAAqD;AAC1D,SAAO,CAACQ,QAAD,EAAWQ,QAAX,KAAwB;AAAA,2BACLA,QAAQ,GAAGC,IADN;AAAA,UACrBd,IADqB,kBACrBA,IADqB;AAAA,UACfe,KADe,kBACfA,KADe;AAE7BV,IAAAA,QAAQ,CAACT,cAAc,CAACC,UAAD,CAAf,CAAR;AACAQ,IAAAA,QAAQ,CAACZ,SAAS,CAACC,KAAD,CAAV,CAAR;AACA,UAAMsB,YAAY,GAAG;AAAEC,MAAAA,MAAM,EAAE;AAAEjB,QAAAA,IAAF;AAAQkB,QAAAA,aAAa,EAAEH,KAAvB;AAA8BrB,QAAAA,KAA9B;AAAqCG,QAAAA;AAArC;AAAV,KAArB;AACAW,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BU,IAAI,CAACC,SAAL,CAAeJ,YAAf,CAA9B;AACD,GAND;AAOD","sourcesContent":["import { fetchAPITrivia, fetchAPIQuestions } from '../services';\n\nexport const LOGIN = 'LOGIN';\nexport const login = (userData) => ({ type: LOGIN, userData });\n\nexport const TOKEN = 'TOKEN';\nexport const sendToken = (token) => ({ type: TOKEN, token });\n\nexport const QUESTIONS = 'QUESTIONS';\nexport const sendQuestions = (questions) => ({ type: QUESTIONS, questions });\n\nexport const SCORE = 'SCORE';\nexport const sendScore = (score) => ({ type: SCORE, score });\n\nexport const ASSERTIONS = 'ASSERTIONS';\nexport const sendAssertions = (assertions) => ({ type: ASSERTIONS, assertions });\n\nexport const ADD_RANKING = 'ADD_RANKING';\nexport const addRanking = (name, hash) => ({ type: ADD_RANKING, name, hash });\n\nexport const RESET_GAME = 'RESET_GAME';\nexport const resetGame = () => ({ type: RESET_GAME });\n\nexport function handleToken() {\n  return async (dispatch) => {\n    const tokenObjResponse = await fetchAPITrivia();\n    const tokenCode = tokenObjResponse.token;\n    dispatch(sendToken(tokenCode));\n    localStorage.setItem('token', tokenCode);\n  };\n}\n\nexport function getQuestions(token) {\n  return async (dispatch) => {\n    const questionObject = await fetchAPIQuestions(token);\n    dispatch(sendQuestions(questionObject));\n  };\n}\n\nexport function updateScoreAndAssertions(score, assertions) {\n  return (dispatch, setState) => {\n    const { name, email } = setState().user;\n    dispatch(sendAssertions(assertions));\n    dispatch(sendScore(score));\n    const playerObject = { player: { name, gravatarEmail: email, score, assertions } };\n    localStorage.setItem('state', JSON.stringify(playerObject));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}