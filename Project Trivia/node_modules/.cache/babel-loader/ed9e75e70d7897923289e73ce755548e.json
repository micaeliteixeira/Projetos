{"ast":null,"code":"import _objectSpread from \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/Questions.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getQuestions } from '../actions';\n\nclass Questions extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n  componentDidMount() {\n    const token = this.props.token;\n    const questions = this.props.questions;\n    questions(token);\n  }\n\n  render() {\n    const question = this.props.question;\n\n    const convert = (question, key) => {\n      question.reduce((obj, item) => _objectSpread({}, obj, {\n        [item[key]]: item\n      }));\n    };\n\n    console.log(convert); // const { question, correct_answer, incorrect_answer } = questions;\n    // console.log(question);\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.user.token,\n  question: state.game.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  questions: token => dispatch(getQuestions(token))\n});\n\nQuestions.propTypes = {\n  token: PropTypes.object,\n  question: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/Questions.js"],"names":["React","Component","PropTypes","connect","getQuestions","Questions","componentDidMount","token","props","questions","render","question","convert","key","reduce","obj","item","console","log","mapStateToProps","state","user","game","mapDispatchToProps","dispatch","propTypes","object","func","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,YAA7B;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChC;AACA;AACA;AAEAK,EAAAA,iBAAiB,GAAG;AAAA,UACVC,KADU,GACA,KAAKC,KADL,CACVD,KADU;AAAA,UAEVE,SAFU,GAEI,KAAKD,KAFT,CAEVC,SAFU;AAGlBA,IAAAA,SAAS,CAACF,KAAD,CAAT;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKH,KADnB,CACCG,QADD;;AAEP,UAAMC,OAAO,GAAG,CAACD,QAAD,EAAWE,GAAX,KAAmB;AACjCF,MAAAA,QAAQ,CAACG,MAAT,CACE,CAACC,GAAD,EAAMC,IAAN,uBACKD,GADL;AAEE,SAACC,IAAI,CAACH,GAAD,CAAL,GAAaG;AAFf,QADF;AAMD,KAPD;;AAQAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAVO,CAWP;AACA;;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAiCD;;AA1D+B;;AA6DlC,MAAMO,eAAe,GAAIC,KAAD,KAAY;AAClCb,EAAAA,KAAK,EAAEa,KAAK,CAACC,IAAN,CAAWd,KADgB;AAElCI,EAAAA,QAAQ,EAAES,KAAK,CAACE,IAAN,CAAWb;AAFa,CAAZ,CAAxB;;AAKA,MAAMc,kBAAkB,GAAIC,QAAD,KAAe;AACxCf,EAAAA,SAAS,EAAGF,KAAD,IAAWiB,QAAQ,CAACpB,YAAY,CAACG,KAAD,CAAb;AADU,CAAf,CAA3B;;AAIAF,SAAS,CAACoB,SAAV,GAAsB;AACpBlB,EAAAA,KAAK,EAAEL,SAAS,CAACwB,MADG;AAEpBf,EAAAA,QAAQ,EAAET,SAAS,CAACyB;AAFA,EAGpBC,UAHF;AAKA,eAAezB,OAAO,CAACgB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6ClB,SAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getQuestions } from '../actions';\n\nclass Questions extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    const { token } = this.props;\n    const { questions } = this.props;\n    questions(token);\n  }\n\n  render() {\n    const { question } = this.props;\n    const convert = (question, key) => {\n      question.reduce(\n        (obj, item) => ({\n          ...obj,\n          [item[key]]: item,\n        }),\n      );\n    };\n    console.log(convert);\n    // const { question, correct_answer, incorrect_answer } = questions;\n    // console.log(question);\n\n    return (\n      <div className=\"container\">\n        {/* {question.map((questions, index) => (\n          <div key={ index }>\n            <div className=\"box-question\">\ns\n              <div className=\"field-category\">\n                <h3 data-testid=\"question-category\">{questions.category}</h3>\n              </div>\n              <div className=\"field-question\">\n                <p data-testid=\"question-text\">{questions.question}</p>\n              </div>\n            </div>\n            <div className=\"box-alternatives\">\n              <div>\n                <button type=\"button\" data-testid=\"correct-answer\">\n                  {questions.correct_answer}\n                </button>\n                {question.incorrect_answers.map(((iten, position) => (\n                  <button\n                    type=\"button\"\n                    key={ position }\n                    data-testid={ `wrong-answer-${position}` }\n                  >\n                    {iten}\n                  </button>\n                )))}\n              </div>\n            </div>\n          </div>\n        )).filter((_, index) => index === 0)} */}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.user.token,\n  question: state.game.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  questions: (token) => dispatch(getQuestions(token)),\n});\n\nQuestions.propTypes = {\n  token: PropTypes.object,\n  question: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}