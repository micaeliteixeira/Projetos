{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/QuestionCard.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateScoreAndAssertions } from '../actions';\nimport './QuestionCard.css';\n\nclass QuestionCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      answered: false,\n      isDisabled: false,\n      indexQuestion: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.question = this.question.bind(this);\n    this.nextQuestions = this.nextQuestions.bind(this);\n    this.calculatesScore = this.calculatesScore.bind(this);\n  }\n\n  nextQuestions() {\n    const _this$state = this.state,\n          answered = _this$state.answered,\n          indexQuestion = _this$state.indexQuestion;\n    const _this$props = this.props,\n          startingInterval = _this$props.startingInterval,\n          clearIntervalToProps = _this$props.clearIntervalToProps;\n\n    if (answered === true) {\n      this.setState({\n        isDisabled: false,\n        answered: false,\n        indexQuestion: indexQuestion + 1\n      });\n    }\n\n    clearIntervalToProps();\n    startingInterval();\n  }\n\n  calculatesScore() {\n    const indexQuestion = this.state.indexQuestion;\n    const _this$props2 = this.props,\n          questions = _this$props2.questions,\n          timer = _this$props2.timer,\n          score = _this$props2.score,\n          assertions = _this$props2.assertions,\n          sendScore = _this$props2.sendScore;\n    const levelName = questions[indexQuestion].difficulty;\n    const three = 3;\n    const ten = 10;\n    let levelPoint = 1;\n    if (levelName === 'easy') levelPoint = 1;\n    if (levelName === 'medium') levelPoint = 2;\n    if (levelName === 'hard') levelPoint = three;\n    const result = score + (ten + timer * levelPoint);\n    sendScore(result, assertions + 1);\n  }\n\n  handleClick({\n    target\n  }) {\n    this.setState({\n      answered: true,\n      isDisabled: true\n    });\n    if (target.className === 'correct-answer') this.calculatesScore();\n  }\n\n  question() {\n    const _this$props3 = this.props,\n          questions = _this$props3.questions,\n          timer = _this$props3.timer;\n    const _this$state2 = this.state,\n          indexQuestion = _this$state2.indexQuestion,\n          isDisabled = _this$state2.isDisabled;\n    const _questions$indexQuest = questions[indexQuestion],\n          category = _questions$indexQuest.category,\n          question = _questions$indexQuest.question;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, ' ', \"Timer:\", timer), \"Category:\", React.createElement(\"span\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, question), React.createElement(\"div\", {\n      className: \"answers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      \"data-testid\": \"correct-answer\",\n      onClick: this.handleClick,\n      type: \"button\",\n      disabled: isDisabled,\n      className: \"correct-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, questions[indexQuestion].correct_answer), questions[indexQuestion].incorrect_answers.map((answer, index) => React.createElement(\"button\", {\n      \"data-testid\": `wrong-answer-${index}`,\n      type: \"button\",\n      key: index,\n      onClick: this.handleClick,\n      disabled: isDisabled,\n      className: \"incorrect-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, answer))));\n  }\n\n  render() {\n    const QUESTIONS_ANSWERED = 5;\n    const _this$state3 = this.state,\n          answered = _this$state3.answered,\n          indexQuestion = _this$state3.indexQuestion;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, indexQuestion >= QUESTIONS_ANSWERED ? React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }) : this.question(), React.createElement(\"button\", {\n      disabled: !answered,\n      hidden: !answered,\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.nextQuestions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.game.questions.results,\n  score: state.game.score,\n  assertions: state.game.assertions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendScore: (score, assertions) => dispatch(updateScoreAndAssertions(score, assertions))\n});\n\nQuestionCard.propTypes = {\n  questions: PropTypes.object\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionCard);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/QuestionCard.js"],"names":["React","Component","Redirect","connect","PropTypes","updateScoreAndAssertions","QuestionCard","constructor","props","state","answered","isDisabled","indexQuestion","handleClick","bind","question","nextQuestions","calculatesScore","startingInterval","clearIntervalToProps","setState","questions","timer","score","assertions","sendScore","levelName","difficulty","three","ten","levelPoint","result","target","className","category","correct_answer","incorrect_answers","map","answer","index","render","QUESTIONS_ANSWERED","mapStateToProps","game","results","mapDispatchToProps","dispatch","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { updateScoreAndAssertions } from '../actions';\nimport './QuestionCard.css';\n\nclass QuestionCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      answered: false,\n      isDisabled: false,\n      indexQuestion: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.question = this.question.bind(this);\n    this.nextQuestions = this.nextQuestions.bind(this);\n    this.calculatesScore = this.calculatesScore.bind(this);\n  }\n\n  nextQuestions() {\n    const { answered, indexQuestion } = this.state;\n    const { startingInterval, clearIntervalToProps } = this.props;\n    if (answered === true) {\n      this.setState({\n        isDisabled: false,\n        answered: false,\n        indexQuestion: indexQuestion + 1,\n      });\n    }\n    clearIntervalToProps();\n    startingInterval();\n  }\n\n  calculatesScore() {\n    const { indexQuestion } = this.state;\n    const { questions, timer, score, assertions, sendScore } = this.props;\n    const levelName = questions[indexQuestion].difficulty;\n    const three = 3;\n    const ten = 10;\n    let levelPoint = 1;\n\n    if (levelName === 'easy') levelPoint = 1;\n    if (levelName === 'medium') levelPoint = 2;\n    if (levelName === 'hard') levelPoint = three;\n\n    const result = score + (ten + timer * levelPoint);\n    sendScore(result, assertions + 1);\n  }\n\n  handleClick({ target }) {\n    this.setState({\n      answered: true,\n      isDisabled: true,\n    });\n    if (target.className === 'correct-answer') this.calculatesScore();\n  }\n\n  question() {\n    const { questions, timer } = this.props;\n    const { indexQuestion, isDisabled } = this.state;\n    const { category, question } = questions[indexQuestion];\n    return (\n      <div>\n        <p>\n          {' '}\nTimer:\n          {timer}\n        </p>\n          Category:\n        <span data-testid=\"question-category\">{category}</span>\n        <p data-testid=\"question-text\">{question}</p>\n        <div className=\"answers\">\n          <button\n            data-testid=\"correct-answer\"\n            onClick={ this.handleClick }\n            type=\"button\"\n            disabled={ isDisabled }\n            className=\"correct-answer\"\n          >\n            {questions[indexQuestion].correct_answer}\n          </button>\n          {questions[indexQuestion].incorrect_answers.map((answer, index) => (\n            <button\n              data-testid={ `wrong-answer-${index}` }\n              type=\"button\"\n              key={ index }\n              onClick={ this.handleClick }\n              disabled={ isDisabled }\n              className=\"incorrect-answer\"\n            >\n              {answer}\n            </button>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const QUESTIONS_ANSWERED = 5;\n    const { answered, indexQuestion } = this.state;\n    return (\n      <div>\n        {indexQuestion >= QUESTIONS_ANSWERED ? (\n          <Redirect to=\"/feedback\" />\n        ) : (\n          this.question()\n        )}\n        <button\n          disabled={ !answered }\n          hidden={ !answered }\n          type=\"button\"\n          data-testid=\"btn-next\"\n          onClick={ this.nextQuestions }\n        >\n          Próxima\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.game.questions.results,\n  score: state.game.score,\n  assertions: state.game.assertions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendScore: (score, assertions) => dispatch(updateScoreAndAssertions(score, assertions)),\n});\n\nQuestionCard.propTypes = {\n  questions: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionCard);\n"]},"metadata":{},"sourceType":"module"}