{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/Questions.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getQuestions } from '../actions';\n\nclass Questions extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n  componentDidMount() {\n    const token = this.props.token;\n    const questions = this.props.questions;\n    questions(token);\n  }\n\n  render() {\n    const question = this.props.question; // const { question, correct_answer, incorrect_answer } = questions;\n\n    console.log(question);\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, question && question.map((questions, index) => React.createElement(\"div\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"box-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"s\", React.createElement(\"div\", {\n      className: \"field-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, questions.category)), React.createElement(\"div\", {\n      className: \"field-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, questions.question))), React.createElement(\"div\", {\n      className: \"box-alternatives\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"correct-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, questions.correct_answer), question.incorrect_answers.map((iten, position) => React.createElement(\"button\", {\n      type: \"button\",\n      key: position,\n      \"data-testid\": `wrong-answer-${position}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, iten)))))).filter((_, index) => index === 0));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.user.token,\n  question: state.game.questions\n});\n\nconst mapDispatchToProps = dispatch => ({\n  questions: token => dispatch(getQuestions(token))\n});\n\nQuestions.propTypes = {\n  token: PropTypes.object,\n  question: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/Questions.js"],"names":["React","Component","PropTypes","connect","getQuestions","Questions","componentDidMount","token","props","questions","render","question","console","log","map","index","category","correct_answer","incorrect_answers","iten","position","filter","_","mapStateToProps","state","user","game","mapDispatchToProps","dispatch","propTypes","object","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,YAA7B;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChC;AACA;AACA;AAEAK,EAAAA,iBAAiB,GAAG;AAAA,UACVC,KADU,GACA,KAAKC,KADL,CACVD,KADU;AAAA,UAEVE,SAFU,GAEI,KAAKD,KAFT,CAEVC,SAFU;AAGlBA,IAAAA,SAAS,CAACF,KAAD,CAAT;AACD;;AAEDG,EAAAA,MAAM,GAAG;AAAA,UACCC,QADD,GACc,KAAKH,KADnB,CACCG,QADD,EAEP;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,QAAQ,IAAIA,QAAQ,CAACG,GAAT,CAAa,CAACL,SAAD,EAAYM,KAAZ,KACxB;AAAK,MAAA,GAAG,EAAGA,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,qBAAY,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCN,SAAS,CAACO,QAA/C,CADF,CAFF,EAKE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCP,SAAS,CAACE,QAA1C,CADF,CALF,CADF,EAUE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,qBAAY,gBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGF,SAAS,CAACQ,cADb,CADF,EAIGN,QAAQ,CAACO,iBAAT,CAA2BJ,GAA3B,CAAgC,CAACK,IAAD,EAAOC,QAAP,KAC/B;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,GAAG,EAAGA,QAFR;AAGE,qBAAe,gBAAeA,QAAS,EAHzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGD,IALH,CADD,CAJH,CADF,CAVF,CADW,EA4BVE,MA5BU,CA4BH,CAACC,CAAD,EAAIP,KAAJ,KAAcA,KAAK,KAAK,CA5BrB,CADf,CADF;AAiCD;;AAjD+B;;AAoDlC,MAAMQ,eAAe,GAAIC,KAAD,KAAY;AAClCjB,EAAAA,KAAK,EAAEiB,KAAK,CAACC,IAAN,CAAWlB,KADgB;AAElCI,EAAAA,QAAQ,EAAEa,KAAK,CAACE,IAAN,CAAWjB;AAFa,CAAZ,CAAxB;;AAKA,MAAMkB,kBAAkB,GAAIC,QAAD,KAAe;AACxCnB,EAAAA,SAAS,EAAGF,KAAD,IAAWqB,QAAQ,CAACxB,YAAY,CAACG,KAAD,CAAb;AADU,CAAf,CAA3B;;AAIAF,SAAS,CAACwB,SAAV,GAAsB;AACpBtB,EAAAA,KAAK,EAAEL,SAAS,CAAC4B,MADG;AAEpBnB,EAAAA,QAAQ,EAAET,SAAS,CAAC6B;AAFA,EAGpBC,UAHF;AAKA,eAAe7B,OAAO,CAACoB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CtB,SAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getQuestions } from '../actions';\n\nclass Questions extends Component {\n  // constructor(props) {\n  //   super(props);\n  // }\n\n  componentDidMount() {\n    const { token } = this.props;\n    const { questions } = this.props;\n    questions(token);\n  }\n\n  render() {\n    const { question } = this.props;\n    // const { question, correct_answer, incorrect_answer } = questions;\n    console.log(question);\n\n    return (\n      <div className=\"container\">\n        {question && question.map((questions, index) => (\n          <div key={ index }>\n            <div className=\"box-question\">\ns\n              <div className=\"field-category\">\n                <h3 data-testid=\"question-category\">{questions.category}</h3>\n              </div>\n              <div className=\"field-question\">\n                <p data-testid=\"question-text\">{questions.question}</p>\n              </div>\n            </div>\n            <div className=\"box-alternatives\">\n              <div>\n                <button type=\"button\" data-testid=\"correct-answer\">\n                  {questions.correct_answer}\n                </button>\n                {question.incorrect_answers.map(((iten, position) => (\n                  <button\n                    type=\"button\"\n                    key={ position }\n                    data-testid={ `wrong-answer-${position}` }\n                  >\n                    {iten}\n                  </button>\n                )))}\n              </div>\n            </div>\n          </div>\n        )).filter((_, index) => index === 0)}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.user.token,\n  question: state.game.questions,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  questions: (token) => dispatch(getQuestions(token)),\n});\n\nQuestions.propTypes = {\n  token: PropTypes.object,\n  question: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n"]},"metadata":{},"sourceType":"module"}