{"ast":null,"code":"import _objectSpread from \"/home/micaeli/Trybe/Trybe Project/Project Trivia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { QUESTIONS, ASSERTIONS, SCORE, SAVE_SETTINGS, ADD_RANKING, RESET_GAME, ADD_CATEGORIES } from '../actions';\nconst INITIAL_STATE = {\n  questions: '',\n  assertions: 0,\n  score: 0,\n  ranking: [],\n  settings: {\n    category: 'Any Category',\n    difficulty: 'Any Difficulty',\n    type: 'Any Type'\n  },\n  options: {\n    categories: [''],\n    difficulty: [{\n      id: 0,\n      name: 'Any Difficulty'\n    }, {\n      id: 'easy',\n      name: 'Easy'\n    }, {\n      id: 'medium',\n      name: 'Medium'\n    }, {\n      id: 'hard',\n      name: 'Hard'\n    }],\n    type: [{\n      id: 0,\n      name: 'Any Type'\n    }, {\n      id: 'multiple',\n      name: 'Multiple Choice'\n    }, {\n      id: 'boolean',\n      name: 'True / False'\n    }]\n  }\n};\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case QUESTIONS:\n      return _objectSpread({}, state, {\n        questions: action.questions\n      });\n\n    case SCORE:\n      return _objectSpread({}, state, {\n        score: action.score\n      });\n\n    case ASSERTIONS:\n      return _objectSpread({}, state, {\n        assertions: action.assertions\n      });\n\n    case ADD_CATEGORIES:\n      return _objectSpread({}, state, {\n        options: _objectSpread({}, state.options, {\n          categories: [{\n            id: 0,\n            name: 'Any Category'\n          }, ...action.categories]\n        })\n      });\n\n    case SAVE_SETTINGS:\n      return _objectSpread({}, state, {\n        settings: {\n          category: action.category,\n          difficulty: action.difficulty,\n          type: action.answersType\n        }\n      });\n\n    case ADD_RANKING:\n      return _objectSpread({}, state, {\n        ranking: [...state.ranking, {\n          name: action.name,\n          score: state.score,\n          picture: `https://www.gravatar.com/avatar/${action.hash}`\n        }]\n      });\n\n    case RESET_GAME:\n      return _objectSpread({}, state, {\n        score: 0,\n        assertions: 0\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/micaeli/Trybe/Trybe Project/Project Trivia/src/reducers/game.js"],"names":["QUESTIONS","ASSERTIONS","SCORE","SAVE_SETTINGS","ADD_RANKING","RESET_GAME","ADD_CATEGORIES","INITIAL_STATE","questions","assertions","score","ranking","settings","category","difficulty","type","options","categories","id","name","state","action","answersType","picture","hash"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,KAAhC,EAAuCC,aAAvC,EACEC,WADF,EACeC,UADf,EAC2BC,cAD3B,QAEO,YAFP;AAIA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,SAAS,EAAE,EADS;AAEpBC,EAAAA,UAAU,EAAE,CAFQ;AAGpBC,EAAAA,KAAK,EAAE,CAHa;AAIpBC,EAAAA,OAAO,EAAE,EAJW;AAKpBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,cADF;AAERC,IAAAA,UAAU,EAAE,gBAFJ;AAGRC,IAAAA,IAAI,EAAE;AAHE,GALU;AAUpBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,UAAU,EAAE,CAAC,EAAD,CADL;AAEPH,IAAAA,UAAU,EAAE,CACV;AAAEI,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE;AAAf,KADU,EAEV;AAAED,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE;AAApB,KAFU,EAGV;AAAED,MAAAA,EAAE,EAAE,QAAN;AAAgBC,MAAAA,IAAI,EAAE;AAAtB,KAHU,EAIV;AAAED,MAAAA,EAAE,EAAE,MAAN;AAAcC,MAAAA,IAAI,EAAE;AAApB,KAJU,CAFL;AAOPJ,IAAAA,IAAI,EAAE,CACJ;AAAEG,MAAAA,EAAE,EAAE,CAAN;AAASC,MAAAA,IAAI,EAAE;AAAf,KADI,EAEJ;AAAED,MAAAA,EAAE,EAAE,UAAN;AAAkBC,MAAAA,IAAI,EAAE;AAAxB,KAFI,EAGJ;AAAED,MAAAA,EAAE,EAAE,SAAN;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAHI;AAPC;AAVW,CAAtB;AAwBA,eAAe,UAAUC,KAAK,GAAGb,aAAlB,EAAiCc,MAAjC,EAAyC;AACtD,UAAQA,MAAM,CAACN,IAAf;AACA,SAAKf,SAAL;AACE,+BAAYoB,KAAZ;AAAmBZ,QAAAA,SAAS,EAAEa,MAAM,CAACb;AAArC;;AACF,SAAKN,KAAL;AACE,+BAAYkB,KAAZ;AAAmBV,QAAAA,KAAK,EAAEW,MAAM,CAACX;AAAjC;;AACF,SAAKT,UAAL;AACE,+BAAYmB,KAAZ;AAAmBX,QAAAA,UAAU,EAAEY,MAAM,CAACZ;AAAtC;;AACF,SAAKH,cAAL;AACE,+BACKc,KADL;AAEEJ,QAAAA,OAAO,oBACFI,KAAK,CAACJ,OADJ;AAELC,UAAAA,UAAU,EAAE,CAAC;AAAEC,YAAAA,EAAE,EAAE,CAAN;AAASC,YAAAA,IAAI,EAAE;AAAf,WAAD,EAAkC,GAAGE,MAAM,CAACJ,UAA5C;AAFP;AAFT;;AAOF,SAAKd,aAAL;AACE,+BACKiB,KADL;AAEER,QAAAA,QAAQ,EAAE;AACRC,UAAAA,QAAQ,EAAEQ,MAAM,CAACR,QADT;AAERC,UAAAA,UAAU,EAAEO,MAAM,CAACP,UAFX;AAGRC,UAAAA,IAAI,EAAEM,MAAM,CAACC;AAHL;AAFZ;;AAQF,SAAKlB,WAAL;AACE,+BAAYgB,KAAZ;AACET,QAAAA,OAAO,EAAE,CACP,GAAGS,KAAK,CAACT,OADF,EAEP;AAAEQ,UAAAA,IAAI,EAAEE,MAAM,CAACF,IAAf;AAAqBT,UAAAA,KAAK,EAAEU,KAAK,CAACV,KAAlC;AAAyCa,UAAAA,OAAO,EAAG,mCAAkCF,MAAM,CAACG,IAAK;AAAjG,SAFO;AADX;;AAKF,SAAKnB,UAAL;AACE,+BAAYe,KAAZ;AAAmBV,QAAAA,KAAK,EAAE,CAA1B;AAA6BD,QAAAA,UAAU,EAAE;AAAzC;;AACF;AACE,aAAOW,KAAP;AAjCF;AAmCD","sourcesContent":["import { QUESTIONS, ASSERTIONS, SCORE, SAVE_SETTINGS,\n  ADD_RANKING, RESET_GAME, ADD_CATEGORIES,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  questions: '',\n  assertions: 0,\n  score: 0,\n  ranking: [],\n  settings: {\n    category: 'Any Category',\n    difficulty: 'Any Difficulty',\n    type: 'Any Type',\n  },\n  options: {\n    categories: [''],\n    difficulty: [\n      { id: 0, name: 'Any Difficulty' },\n      { id: 'easy', name: 'Easy' },\n      { id: 'medium', name: 'Medium' },\n      { id: 'hard', name: 'Hard' }],\n    type: [\n      { id: 0, name: 'Any Type' },\n      { id: 'multiple', name: 'Multiple Choice' },\n      { id: 'boolean', name: 'True / False' }],\n  },\n};\n\nexport default function (state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case QUESTIONS:\n    return { ...state, questions: action.questions };\n  case SCORE:\n    return { ...state, score: action.score };\n  case ASSERTIONS:\n    return { ...state, assertions: action.assertions };\n  case ADD_CATEGORIES:\n    return {\n      ...state,\n      options: {\n        ...state.options,\n        categories: [{ id: 0, name: 'Any Category' }, ...action.categories],\n      },\n    };\n  case SAVE_SETTINGS:\n    return {\n      ...state,\n      settings: {\n        category: action.category,\n        difficulty: action.difficulty,\n        type: action.answersType,\n      },\n    };\n  case ADD_RANKING:\n    return { ...state,\n      ranking: [\n        ...state.ranking,\n        { name: action.name, score: state.score, picture: `https://www.gravatar.com/avatar/${action.hash}` },\n      ] };\n  case RESET_GAME:\n    return { ...state, score: 0, assertions: 0 };\n  default:\n    return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}