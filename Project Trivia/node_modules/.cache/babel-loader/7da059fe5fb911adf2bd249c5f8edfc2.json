{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Header, QuestionCard, Loading } from '../components';\nimport { getQuestions, updateScoreAndAssertions } from '../actions';\nimport './Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      timer: 0,\n      interval: {}\n    };\n    this.updateState = this.updateState.bind(this);\n    this.startingInterval = this.startingInterval.bind(this);\n    this.clearInterval = this.clearInterval.bind(this);\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          dispatchQuestions = _this$props.dispatchQuestions,\n          sendScore = _this$props.sendScore;\n    sendScore(0, 0);\n    await dispatchQuestions(token);\n    this.updateState();\n    this.startingInterval();\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex; // While there remain elements to shuffle...\n\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  randowChields() {\n    const containerAnswers = document.querySelector('.answers');\n\n    if (containerAnswers !== null) {\n      const answersAlternatives = [...containerAnswers.children];\n      this.shuffle(answersAlternatives);\n      answersAlternatives.map(element => containerAnswers.appendChild(element));\n    }\n  }\n\n  startingInterval() {\n    this.setState({\n      timer: 5\n    }, () => {\n      const mil = 1000;\n      const interval = setInterval(() => this.counting(), mil);\n      this.setState({\n        interval\n      });\n      this.randowChields();\n    });\n  }\n\n  clearInterval() {\n    const interval = this.state.interval;\n    clearInterval(interval);\n  }\n\n  counting() {\n    const timer = this.state.timer;\n    const timeQuestion = 30;\n\n    if (timer <= timeQuestion && timer > 0) {\n      this.setState(prevState => ({\n        timer: prevState.timer - 1\n      }));\n    } else {\n      this.clearInterval();\n      const correctAnswer = document.querySelector('[data-testid=\"correct-answer\"]');\n      correctAnswer.disabled = true;\n      document.querySelector('[data-testid=\"wrong-answer-0\"]').click();\n    }\n  }\n\n  updateState() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          timer = _this$state.timer;\n    return React.createElement(\"div\", {\n      className: \"class-game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), isLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }) : React.createElement(QuestionCard, {\n      timer: timer,\n      startingInterval: this.startingInterval,\n      clearIntervalToProps: this.clearInterval,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.user.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchQuestions: token => dispatch(getQuestions(token)),\n  sendScore: (score, assertions) => dispatch(updateScoreAndAssertions(score, assertions))\n});\n\nGame.propTypes = {\n  token: PropTypes.array,\n  dispatchQuestions: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/pages/Game.js"],"names":["React","Component","connect","PropTypes","Header","QuestionCard","Loading","getQuestions","updateScoreAndAssertions","Game","constructor","props","state","isLoading","timer","interval","updateState","bind","startingInterval","clearInterval","componentDidMount","token","dispatchQuestions","sendScore","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","randowChields","containerAnswers","document","querySelector","answersAlternatives","children","map","element","appendChild","setState","mil","setInterval","counting","timeQuestion","prevState","correctAnswer","disabled","click","render","mapStateToProps","user","mapDispatchToProps","dispatch","score","assertions","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Header, QuestionCard, Loading } from '../components';\nimport { getQuestions, updateScoreAndAssertions } from '../actions';\nimport './Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      timer: 0,\n      interval: {},\n    };\n    this.updateState = this.updateState.bind(this);\n    this.startingInterval = this.startingInterval.bind(this);\n    this.clearInterval = this.clearInterval.bind(this);\n  }\n\n  async componentDidMount() {\n    const { token, dispatchQuestions, sendScore } = this.props;\n    sendScore(0, 0);\n    await dispatchQuestions(token);\n    this.updateState();\n    this.startingInterval();\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  randowChields() {\n    const containerAnswers = document.querySelector('.answers');\n    if (containerAnswers !== null) {\n      const answersAlternatives = [...containerAnswers.children];\n      this.shuffle(answersAlternatives);\n      answersAlternatives.map((element) => containerAnswers.appendChild(element));\n    }\n  }\n\n  startingInterval() {\n    this.setState(\n      {\n        timer: 5,\n      },\n      () => {\n        const mil = 1000;\n        const interval = setInterval(() => this.counting(), mil);\n        this.setState({ interval });\n        this.randowChields();\n      },\n    );\n  }\n\n  clearInterval() {\n    const { interval } = this.state;\n    clearInterval(interval);\n  }\n\n  counting() {\n    const { timer } = this.state;\n    const timeQuestion = 30;\n    if (timer <= timeQuestion && timer > 0) {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n    } else {\n      this.clearInterval();\n      const correctAnswer = document.querySelector(\n        '[data-testid=\"correct-answer\"]',\n      );\n      correctAnswer.disabled = true;\n      document.querySelector(\n        '[data-testid=\"wrong-answer-0\"]',\n      ).click();\n    }\n  }\n\n  updateState() {\n    this.setState({\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const { isLoading, timer } = this.state;\n    return (\n      <div className=\"class-game\">\n        <Header />\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <QuestionCard\n            timer={ timer }\n            startingInterval={ this.startingInterval }\n            clearIntervalToProps={ this.clearInterval }\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.user.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchQuestions: (token) => dispatch(getQuestions(token)),\n  sendScore: (score, assertions) => dispatch(updateScoreAndAssertions(score, assertions)),\n});\n\nGame.propTypes = {\n  token: PropTypes.array,\n  dispatchQuestions: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}