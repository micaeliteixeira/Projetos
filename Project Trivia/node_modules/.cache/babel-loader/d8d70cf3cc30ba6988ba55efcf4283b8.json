{"ast":null,"code":"import { fetchToken, fetchQuestions, fetchCategories } from '../services';\nexport const LOGIN = 'LOGIN';\nexport const login = userData => ({\n  type: LOGIN,\n  userData\n});\nexport const TOKEN = 'TOKEN';\nexport const sendToken = token => ({\n  type: TOKEN,\n  token\n});\nexport const QUESTIONS = 'QUESTIONS';\nexport const sendQuestions = questions => ({\n  type: QUESTIONS,\n  questions\n});\nexport const SCORE = 'SCORE';\nexport const sendScore = score => ({\n  type: SCORE,\n  score\n});\nexport const ASSERTIONS = 'ASSERTIONS';\nexport const sendAssertions = assertions => ({\n  type: ASSERTIONS,\n  assertions\n});\nexport const ADD_RANKING = 'ADD_RANKING';\nexport const addRanking = (name, hash) => ({\n  type: ADD_RANKING,\n  name,\n  hash\n});\nexport const RESET_GAME = 'RESET_GAME';\nexport const resetGame = () => ({\n  type: RESET_GAME\n});\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\nexport const addCategories = categories => ({\n  type: ADD_CATEGORIES,\n  categories\n});\nexport const SAVE_SETTINGS = 'SAVE_SETTINGS';\nexport const saveSettings = (category, difficulty, answersType) => ({\n  type: SAVE_SETTINGS,\n  category,\n  difficulty,\n  answersType\n});\nexport function handleToken() {\n  return async dispatch => {\n    const tokenObjResponse = await fetchToken();\n    const tokenCode = tokenObjResponse.token;\n    dispatch(sendToken(tokenCode));\n    localStorage.setItem('token', tokenCode);\n  };\n}\nexport function getQuestions(token) {\n  return async (dispatch, getState) => {\n    const _getState$game$settin = getState().game.settings,\n          category = _getState$game$settin.category,\n          difficulty = _getState$game$settin.difficulty,\n          type = _getState$game$settin.type;\n    const numberOfQuestions = 5;\n    const settingsObject = {\n      category: category !== 'Any Category' ? category : '',\n      difficulty: difficulty !== 'Any Difficulty' ? difficulty : '',\n      type: type !== 'Any Type' ? type : ''\n    };\n    const questionObject = await fetchQuestions(numberOfQuestions, settingsObject, token);\n    dispatch(sendQuestions(questionObject));\n  };\n}\nexport function updateScoreAndAssertions(score, assertions) {\n  return (dispatch, getState) => {\n    const _getState$user = getState().user,\n          name = _getState$user.name,\n          email = _getState$user.email;\n    dispatch(sendAssertions(assertions));\n    dispatch(sendScore(score));\n    const playerObject = {\n      player: {\n        name,\n        gravatarEmail: email,\n        score,\n        assertions\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(playerObject));\n  };\n}\nexport function getCategories() {\n  return async dispatch => {\n    const categoriesObject = await fetchCategories();\n    const categories = categoriesObject.trivia_categories.map(category => category);\n    dispatch(addCategories(categories));\n  };\n}","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/actions/index.js"],"names":["fetchToken","fetchQuestions","fetchCategories","LOGIN","login","userData","type","TOKEN","sendToken","token","QUESTIONS","sendQuestions","questions","SCORE","sendScore","score","ASSERTIONS","sendAssertions","assertions","ADD_RANKING","addRanking","name","hash","RESET_GAME","resetGame","ADD_CATEGORIES","addCategories","categories","SAVE_SETTINGS","saveSettings","category","difficulty","answersType","handleToken","dispatch","tokenObjResponse","tokenCode","localStorage","setItem","getQuestions","getState","game","settings","numberOfQuestions","settingsObject","questionObject","updateScoreAndAssertions","user","email","playerObject","player","gravatarEmail","JSON","stringify","getCategories","categoriesObject","trivia_categories","map"],"mappings":"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","sourcesContent":["import { fetchToken, fetchQuestions, fetchCategories } from '../services';\n\nexport const LOGIN = 'LOGIN';\nexport const login = (userData) => ({ type: LOGIN, userData });\n\nexport const TOKEN = 'TOKEN';\nexport const sendToken = (token) => ({ type: TOKEN, token });\n\nexport const QUESTIONS = 'QUESTIONS';\nexport const sendQuestions = (questions) => ({ type: QUESTIONS, questions });\n\nexport const SCORE = 'SCORE';\nexport const sendScore = (score) => ({ type: SCORE, score });\n\nexport const ASSERTIONS = 'ASSERTIONS';\nexport const sendAssertions = (assertions) => ({ type: ASSERTIONS, assertions });\n\nexport const ADD_RANKING = 'ADD_RANKING';\nexport const addRanking = (name, hash) => ({ type: ADD_RANKING, name, hash });\n\nexport const RESET_GAME = 'RESET_GAME';\nexport const resetGame = () => ({ type: RESET_GAME });\n\nexport const ADD_CATEGORIES = 'ADD_CATEGORIES';\nexport const addCategories = (categories) => ({ type: ADD_CATEGORIES, categories });\n\nexport const SAVE_SETTINGS = 'SAVE_SETTINGS';\nexport const saveSettings = (category, difficulty, answersType) => ({\n  type: SAVE_SETTINGS,\n  category,\n  difficulty,\n  answersType,\n});\n\nexport function handleToken() {\n  return async (dispatch) => {\n    const tokenObjResponse = await fetchToken();\n    const tokenCode = tokenObjResponse.token;\n    dispatch(sendToken(tokenCode));\n    localStorage.setItem('token', tokenCode);\n  };\n}\n\nexport function getQuestions(token) {\n  return async (dispatch, getState) => {\n    const { category, difficulty, type } = getState().game.settings;\n    const numberOfQuestions = 5;\n    const settingsObject = {\n      category: (category !== 'Any Category') ? category : '',\n      difficulty: (difficulty !== 'Any Difficulty') ? difficulty : '',\n      type: (type !== 'Any Type') ? type : '',\n    };\n    const questionObject = await fetchQuestions(numberOfQuestions, settingsObject, token);\n    dispatch(sendQuestions(questionObject));\n  };\n}\n\nexport function updateScoreAndAssertions(score, assertions) {\n  return (dispatch, getState) => {\n    const { name, email } = getState().user;\n    dispatch(sendAssertions(assertions));\n    dispatch(sendScore(score));\n    const playerObject = { player: { name, gravatarEmail: email, score, assertions } };\n    localStorage.setItem('state', JSON.stringify(playerObject));\n  };\n}\n\nexport function getCategories() {\n  return async (dispatch) => {\n    const categoriesObject = await fetchCategories();\n    const categories = categoriesObject.trivia_categories.map((category) => category);\n    dispatch(addCategories(categories));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}