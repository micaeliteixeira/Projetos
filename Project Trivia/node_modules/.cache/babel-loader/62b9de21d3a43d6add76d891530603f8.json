{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Header, QuestionCard, Loading } from '../components';\nimport { getQuestions, updateScoreAndAssertions } from '../actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      timer: 0,\n      interval: {}\n    };\n    this.updateState = this.updateState.bind(this);\n    this.startingInterval = this.startingInterval.bind(this);\n    this.clearInterval = this.clearInterval.bind(this);\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          dispatchQuestions = _this$props.dispatchQuestions,\n          sendScore = _this$props.sendScore;\n    sendScore(0, 0);\n    await dispatchQuestions(token);\n    this.updateState();\n    this.startingInterval();\n  }\n\n  startingInterval() {\n    this.setState({\n      timer: 30\n    }, () => {\n      const mil = 1000;\n      const interval = setInterval(() => this.counting(), mil);\n      this.setState({\n        interval\n      });\n    });\n  }\n\n  clearInterval() {\n    const interval = this.state.interval;\n    clearInterval(interval);\n  }\n\n  counting() {\n    const timer = this.state.timer;\n    const timeQuestion = 30;\n\n    if (timer <= timeQuestion && timer > 0) {\n      this.setState(prevState => ({\n        timer: prevState.timer - 1\n      }));\n    } else {\n      this.clearInterval();\n      const wrongAnswer = document.querySelector('[data-testid=\"correct-answer\"]');\n      wrongAnswer.disabled = true;\n    }\n  }\n\n  updateState() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          timer = _this$state.timer;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), isLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }) : React.createElement(QuestionCard, {\n      timer: timer,\n      startingInterval: this.startingInterval,\n      clearIntervalToProps: this.clearInterval,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.user.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchQuestions: token => dispatch(getQuestions(token)),\n  sendScore: (score, assertions) => dispatch(updateScoreAndAssertions(score, assertions))\n});\n\nGame.propTypes = {\n  token: PropTypes.array,\n  dispatchQuestions: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/pages/Game.js"],"names":["React","Component","connect","PropTypes","Header","QuestionCard","Loading","getQuestions","updateScoreAndAssertions","Game","constructor","props","state","isLoading","timer","interval","updateState","bind","startingInterval","clearInterval","componentDidMount","token","dispatchQuestions","sendScore","setState","mil","setInterval","counting","timeQuestion","prevState","wrongAnswer","document","querySelector","disabled","render","mapStateToProps","user","mapDispatchToProps","dispatch","score","assertions","propTypes","array","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Header, QuestionCard, Loading } from '../components';\nimport { getQuestions, updateScoreAndAssertions } from '../actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      timer: 0,\n      interval: {},\n    };\n    this.updateState = this.updateState.bind(this);\n    this.startingInterval = this.startingInterval.bind(this);\n    this.clearInterval = this.clearInterval.bind(this);\n  }\n\n  async componentDidMount() {\n    const { token, dispatchQuestions, sendScore } = this.props;\n    sendScore(0, 0);\n    await dispatchQuestions(token);\n    this.updateState();\n    this.startingInterval();\n  }\n\n  startingInterval() {\n    this.setState(\n      {\n        timer: 30,\n      },\n      () => {\n        const mil = 1000;\n        const interval = setInterval(() => this.counting(), mil);\n        this.setState({ interval });\n      },\n    );\n  }\n\n  clearInterval() {\n    const { interval } = this.state;\n    clearInterval(interval);\n  }\n\n  counting() {\n    const { timer } = this.state;\n    const timeQuestion = 30;\n    if (timer <= timeQuestion && timer > 0) {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }));\n    } else {\n      this.clearInterval();\n      const wrongAnswer = document.querySelector(\n        '[data-testid=\"correct-answer\"]',\n      );\n      wrongAnswer.disabled = true;\n    }\n  }\n\n  updateState() {\n    this.setState({\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const { isLoading, timer } = this.state;\n    return (\n      <div>\n        <Header />\n        {isLoading ? (\n          <Loading />\n        ) : (\n          <QuestionCard\n            timer={ timer }\n            startingInterval={ this.startingInterval }\n            clearIntervalToProps={ this.clearInterval }\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.user.token,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchQuestions: (token) => dispatch(getQuestions(token)),\n  sendScore: (score, assertions) => dispatch(updateScoreAndAssertions(score, assertions)),\n});\n\nGame.propTypes = {\n  token: PropTypes.array,\n  dispatchQuestions: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}