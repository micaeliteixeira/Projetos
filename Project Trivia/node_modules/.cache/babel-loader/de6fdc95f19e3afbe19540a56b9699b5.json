{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Trybe Project/Project Trivia/src/pages/Settings.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveSettings, getCategories } from '../actions';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    const category = props.category,\n          difficulty = props.difficulty,\n          type = props.type;\n    this.state = {\n      category,\n      difficulty,\n      type\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const loadCategories = this.props.loadCategories;\n    loadCategories();\n  }\n\n  handleChange({\n    target\n  }) {\n    this.setState({\n      [target.id]: target.value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const _this$props = this.props,\n          history = _this$props.history,\n          sendSettings = _this$props.sendSettings;\n    const _this$state = this.state,\n          category = _this$state.category,\n          difficulty = _this$state.difficulty,\n          type = _this$state.type;\n    sendSettings(category, difficulty, type);\n    history.push('/');\n  }\n\n  render() {\n    const options = this.props.options;\n    const _this$state2 = this.state,\n          category = _this$state2.category,\n          difficulty = _this$state2.difficulty,\n          type = _this$state2.type;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      \"data-testid\": \"settings-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"CONFIGURA\\xC7\\xD5ES\"), React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"categories\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Category:\", React.createElement(\"select\", {\n      id: \"category\",\n      onChange: this.handleChange,\n      value: category,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, options.categories.map(item => React.createElement(\"option\", {\n      key: item.id,\n      value: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"difficulty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Difficulty:\", React.createElement(\"select\", {\n      id: \"difficulty\",\n      onChange: this.handleChange,\n      value: difficulty,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, options.difficulty.map(item => React.createElement(\"option\", {\n      key: item.id,\n      value: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"type\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Type:\", React.createElement(\"select\", {\n      id: \"type\",\n      onChange: this.handleChange,\n      value: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, options.type.map(item => React.createElement(\"option\", {\n      key: item.id,\n      value: item.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, item.name)))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Salvar\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  options: state.game.options,\n  category: state.game.settings.category,\n  difficulty: state.game.settings.difficulty,\n  type: state.game.settings.type\n});\n\nconst mapDispatchToProps = dispatch => ({\n  loadCategories: () => dispatch(getCategories()),\n  sendSettings: (category, difficulty, type) => dispatch(saveSettings(category, difficulty, type))\n});\n\nSettings.propTypes = {\n  options: PropTypes.objectOf(PropTypes.array).isRequired,\n  loadCategories: PropTypes.func.isRequired,\n  sendSettings: PropTypes.func.isRequired,\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","map":{"version":3,"sources":["/home/micaeli/Trybe/Trybe Project/Project Trivia/src/pages/Settings.js"],"names":["React","Component","connect","PropTypes","saveSettings","getCategories","Settings","constructor","props","category","difficulty","type","state","handleChange","bind","handleSubmit","componentDidMount","loadCategories","target","setState","id","value","event","preventDefault","history","sendSettings","push","render","options","categories","map","item","name","mapStateToProps","game","settings","mapDispatchToProps","dispatch","propTypes","objectOf","array","isRequired","func","string","shape"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { saveSettings, getCategories } from '../actions';\n\nclass Settings extends Component {\n  constructor(props) {\n    super(props);\n    const { category, difficulty, type } = props;\n    this.state = {\n      category,\n      difficulty,\n      type,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { loadCategories } = this.props;\n    loadCategories();\n  }\n\n  handleChange({ target }) {\n    this.setState({ [target.id]: target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { history, sendSettings } = this.props;\n    const { category, difficulty, type } = this.state;\n    sendSettings(category, difficulty, type);\n    history.push('/');\n  }\n\n  render() {\n    const { options } = this.props;\n    const { category, difficulty, type } = this.state;\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">CONFIGURAÇÕES</h1>\n        <form onSubmit={ this.handleSubmit }>\n          <label htmlFor=\"categories\">\n            Category:\n            <select id=\"category\" onChange={ this.handleChange } value={ category }>\n              {options.categories.map((item) => (\n                <option key={ item.id } value={ item.id }>\n                  { item.name }\n                </option>))}\n            </select>\n          </label>\n          <br />\n          <label htmlFor=\"difficulty\">\n            Difficulty:\n            <select id=\"difficulty\" onChange={ this.handleChange } value={ difficulty }>\n              {options.difficulty.map((item) => (\n                <option key={ item.id } value={ item.id }>\n                  { item.name }\n                </option>))}\n            </select>\n          </label>\n          <br />\n          <label htmlFor=\"type\">\n            Type:\n            <select id=\"type\" onChange={ this.handleChange } value={ type }>\n              {options.type.map((item) => (\n                <option key={ item.id } value={ item.id }>\n                  { item.name }\n                </option>))}\n            </select>\n          </label>\n          <br />\n          <button type=\"submit\">Salvar</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  options: state.game.options,\n  category: state.game.settings.category,\n  difficulty: state.game.settings.difficulty,\n  type: state.game.settings.type,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadCategories: () => dispatch(getCategories()),\n  sendSettings: (category, difficulty, type) => (\n    dispatch(saveSettings(category, difficulty, type))\n  ),\n});\n\nSettings.propTypes = {\n  options: PropTypes.objectOf(PropTypes.array).isRequired,\n  loadCategories: PropTypes.func.isRequired,\n  sendSettings: PropTypes.func.isRequired,\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n"]},"metadata":{},"sourceType":"module"}