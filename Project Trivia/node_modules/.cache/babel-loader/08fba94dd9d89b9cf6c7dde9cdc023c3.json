{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/QuestionCard.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../css/AnswersButton.css';\nimport { Link } from 'react-router-dom';\n\nclass QuestionCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      correct: false,\n      incorrect: false,\n      clicked: false,\n      indexButtonNext: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.nextQuestions = this.nextQuestions.bind(this);\n  }\n\n  nextButton() {\n    const _this$state = this.state,\n          clicked = _this$state.clicked,\n          indexButtonNext = _this$state.indexButtonNext;\n    const next = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.nextQuestions,\n      \"data-testid\": \"btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n    const four = 4;\n    const five = 5;\n\n    if (clicked === true && indexButtonNext <= four) {\n      return next;\n    }\n\n    if (clicked === true && indexButtonNext === five) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/feedback\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        \"data-testid\": \"btn-next\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Pr\\xF3xima\")));\n    }\n  }\n\n  nextQuestions() {\n    const indexButtonNext = this.state.indexButtonNext;\n    this.setState({\n      correct: false,\n      incorrect: false,\n      clicked: false,\n      indexButtonNext: indexButtonNext + 1\n    });\n  }\n\n  handleClick() {\n    this.setState({\n      correct: 'correct-answer',\n      incorrect: 'wrong-answer',\n      clicked: true\n    });\n  }\n\n  render() {\n    const questions = this.props.questions;\n    const indexButtonNext = this.state.indexButtonNext;\n    const _questions$indexButto = questions[indexButtonNext],\n          category = _questions$indexButto.category,\n          question = _questions$indexButto.question;\n    const _this$state2 = this.state,\n          correct = _this$state2.correct,\n          incorrect = _this$state2.incorrect;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"QUESTION CARD\", React.createElement(\"div\", {\n      \"data-testidclassName\": \"question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, category), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, question)), React.createElement(\"div\", {\n      className: \"answers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      \"data-testid\": \"correct-answer\",\n      className: correct,\n      onClick: this.handleClick,\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, questions[indexButtonNext].correct_answer), questions[indexButtonNext].incorrect_answers.map((answer, index) => React.createElement(\"button\", {\n      \"data-testid\": `wrong-answer-${index}`,\n      type: \"button\",\n      key: index,\n      className: incorrect,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, answer))), this.nextButton());\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  questions: state.game.questions.results\n});\n\nQuestionCard.propTypes = {\n  questions: PropTypes.object\n}.isRequired;\nexport default connect(mapStateToProps, null)(QuestionCard);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/components/QuestionCard.js"],"names":["React","Component","connect","PropTypes","Link","QuestionCard","constructor","state","correct","incorrect","clicked","indexButtonNext","handleClick","bind","nextButton","nextQuestions","next","four","five","setState","render","questions","props","category","question","correct_answer","incorrect_answers","map","answer","index","mapStateToProps","game","results","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../css/AnswersButton.css';\nimport { Link } from 'react-router-dom';\n\nclass QuestionCard extends Component {\n  constructor() {\n    super();\n    this.state = {\n      correct: false,\n      incorrect: false,\n      clicked: false,\n      indexButtonNext: 0,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.nextQuestions = this.nextQuestions.bind(this);\n  }\n\n  nextButton() {\n    const { clicked, indexButtonNext } = this.state;\n    const next = (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.nextQuestions }\n          data-testid=\"btn-next\"\n        >\n            Próxima\n        </button>\n      </div>);\n\n    const four = 4;\n    const five = 5;\n\n    if (clicked === true && indexButtonNext <= four) {\n      return (next);\n    } if (clicked === true && indexButtonNext === five) {\n      return (\n        <div>\n          <Link to=\"/feedback\">\n            <button\n              type=\"button\"\n              data-testid=\"btn-next\"\n            >\n          Próxima\n            </button>\n          </Link>\n        </div>\n      );\n    }\n  }\n\n  nextQuestions() {\n    const { indexButtonNext } = this.state;\n    this.setState({\n      correct: false,\n      incorrect: false,\n      clicked: false,\n      indexButtonNext: indexButtonNext + 1,\n    });\n  }\n\n  handleClick() {\n    this.setState({\n      correct: 'correct-answer',\n      incorrect: 'wrong-answer',\n      clicked: true,\n    });\n  }\n\n  render() {\n    const { questions } = this.props;\n    const { indexButtonNext } = this.state;\n    const { category, question } = questions[indexButtonNext];\n    const { correct, incorrect } = this.state;\n\n    return (\n      <div>\n        QUESTION CARD\n        <div data-testidclassName=\"question\">\n          <p data-testid=\"question-category\">{ category }</p>\n          <p data-testid=\"question-text\">{ question }</p>\n        </div>\n        <div className=\"answers\">\n          <button\n            data-testid=\"correct-answer\"\n            className={ correct }\n            onClick={ this.handleClick }\n            type=\"button\"\n          >\n            { questions[indexButtonNext].correct_answer }\n          </button>\n          {questions[indexButtonNext].incorrect_answers.map((answer, index) => (\n            <button\n              data-testid={ `wrong-answer-${index}` }\n              type=\"button\"\n              key={ index }\n              className={ incorrect }\n              onClick={ this.handleClick }\n            >\n              { answer }\n            </button>\n          ))}\n        </div>\n        { this.nextButton() }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questions: state.game.questions.results,\n});\n\nQuestionCard.propTypes = {\n  questions: PropTypes.object,\n}.isRequired;\n\nexport default connect(mapStateToProps, null)(QuestionCard);\n"]},"metadata":{},"sourceType":"module"}