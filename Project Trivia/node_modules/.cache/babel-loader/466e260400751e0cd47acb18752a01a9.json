{"ast":null,"code":"var _jsxFileName = \"/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/pages/Game.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Header, QuestionCard, Loading } from '../components';\nimport { getQuestions } from '../actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      questionAnswer: false,\n      question: 0\n    };\n    this.updateState = this.updateState.bind(this);\n    this.handleClickAnswer = this.handleClickAnswer.bind(this);\n    this.handleClickNext = this.handleClickNext.bind(this);\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          token = _this$props.token,\n          dispatchQuestions = _this$props.dispatchQuestions;\n    await dispatchQuestions(token);\n    this.updateState();\n  }\n\n  updateState() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  handleClickAnswer() {\n    this.setState({\n      questionAnswer: true\n    });\n  }\n\n  handleClickNext() {\n    this.setState({\n      questionAnswer: false\n    });\n  }\n\n  render() {\n    const questions = this.props.questions;\n    console.log(questions);\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          questionAnswer = _this$state.questionAnswer,\n          question = _this$state.question;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), isLoading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }) : React.createElement(QuestionCard, {\n      onClick: this.handleClickAnswer,\n      currentQuestion: question,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), questionAnswer ? React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-next\",\n      onClick: this.handleClickNext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"Pr\\xF3xima\") : ' ');\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.user.token,\n  questions: state.game.questions.results\n});\n\nconst mapDispatchToProps = dispatch => ({\n  dispatchQuestions: token => dispatch(getQuestions(token))\n});\n\nGame.propTypes = {\n  token: PropTypes.array,\n  dispatchQuestions: PropTypes.func\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["/home/micaeli/Trybe/Proj.Obrig/sd-06-project-trivia-react-redux/src/pages/Game.js"],"names":["React","Component","connect","PropTypes","Header","QuestionCard","Loading","getQuestions","Game","constructor","props","state","isLoading","questionAnswer","question","updateState","bind","handleClickAnswer","handleClickNext","componentDidMount","token","dispatchQuestions","setState","render","questions","console","log","mapStateToProps","user","game","results","mapDispatchToProps","dispatch","propTypes","array","func","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Header, QuestionCard, Loading } from '../components';\nimport { getQuestions } from '../actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      questionAnswer: false,\n      question: 0,\n    };\n\n    this.updateState = this.updateState.bind(this);\n    this.handleClickAnswer = this.handleClickAnswer.bind(this);\n    this.handleClickNext = this.handleClickNext.bind(this);\n  }\n\n  async componentDidMount() {\n    const { token, dispatchQuestions } = this.props;\n    await dispatchQuestions(token);\n    this.updateState();\n  }\n\n  updateState() {\n    this.setState({\n      isLoading: false,\n    });\n  }\n\n  handleClickAnswer() {\n    this.setState({\n      questionAnswer: true,\n    });\n  }\n\n  handleClickNext() {\n    this.setState({\n      questionAnswer: false,\n    });\n  }\n\n  render() {\n    const { questions } = this.props;\n    console.log(questions);\n    const { isLoading, questionAnswer, question } = this.state;\n    return (\n      <div>\n        <Header />\n        {isLoading ? <Loading /> : <QuestionCard onClick={ this.handleClickAnswer } currentQuestion={ question } />}\n        { questionAnswer ? <button\n          type=\"button\"\n          data-testid=\"btn-next\"\n          onClick={ this.handleClickNext }\n        >\n        Pr√≥xima\n        </button>\n          : ' '}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.user.token,\n  questions: state.game.questions.results,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatchQuestions: (token) => dispatch(getQuestions(token)),\n});\n\nGame.propTypes = {\n  token: PropTypes.array,\n  dispatchQuestions: PropTypes.func,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n"]},"metadata":{},"sourceType":"module"}